library(reshape2)
library(ggsignif)}
#load master data frame
df <- read.csv("C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/model_parameters_all_flies.csv")
#convert temperature_condition, genetic_condition & zeitgeber_time as factors and recode levels
df$temperature_condition <- factor(df$temperature_condition,
levels = c(25, 30),
labels = c("25_deg", "30_deg"))
df$genetic_condition <- factor(df$genetic_condition,
levels = c("naam", "empty"),
labels = c("naam", "empty"))
df$zeitgeber_time <- factor(df$zeitgeber_time,
levels = c(0, 6, 12, 18),
labels = c("ZT0", "ZT6", "ZT12", "ZT18"))
#recheck format
str(df)
#means & line plots by temperature_condition, genetic condition, and zeitgeber_time
#f0_means
f0_means <- df %>%
group_by(genetic_condition, zeitgeber_time) %>%
summarise(mean_f0 = mean(f0))
#kBT_means
kBT_means <- df %>%
group_by(genetic_condition, zeitgeber_time) %>%
summarise(mean_kBT = mean(kBT))
#Q_means
Q_means <- df %>%
group_by(genetic_condition, zeitgeber_time) %>%
summarise(mean_Q = mean(Q))
View(f0_means)
View(kBT_means)
#kBT
kBT_means_16 <- df %>%
group_by(genetic_condition, zeitgeber_time, temperature_condition) %>%
summarise(mean_kBT = mean(kBT))
#Q
Q_means_16 <- df %>%
group_by(genetic_condition, zeitgeber_time, temperature_condition) %>%
summarise(mean_Q = mean(Q))
#means 4 levels
#f0
f0_means_16 <- df %>%
group_by(genetic_condition, zeitgeber_time, temperature_condition) %>%
summarise(mean_f0 = mean(f0))
View(f0_means_16)
View(Q_means_16)
View(kBT_means_16)
#load libraries
{library(magrittr)
library(dplyr)
library(readr)
library(ggplot2)
library(purrr)
library(ggpubr)
library(car)
library(rstatix)
library(patchwork)
library(ggtext)
library(ARTool)
library(phia)
library(emmeans)
library(reshape2)
library(ggsignif)}
#load master data frame
df <- read.csv("C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/model_parameters_all_flies.csv")
#check format
str(df)
#convert temperature_condition, genetic_condition & zeitgeber_time as factors and recode levels
df$temperature_condition <- factor(df$temperature_condition,
levels = c(25, 30),
labels = c("25_deg", "30_deg"))
df$genetic_condition <- factor(df$genetic_condition,
levels = c("naam", "empty"),
labels = c("naam", "empty"))
df$zeitgeber_time <- factor(df$zeitgeber_time,
levels = c(0, 6, 12, 18),
labels = c("ZT0", "ZT6", "ZT12", "ZT18"))
#recheck format
str(df)
#filter data
df_filtered <- filter(df, temperature_condition == "25_deg")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(kBT ~ temperature_condition * zeitgeber_time, data=df) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
anova(m)
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(kBT ~ temperature_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
anova(m)
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(kBT ~ genetic_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
anova(m)
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
aovdf
View(aovdf)
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/
Research Project/Muhammad Shaikh/LDV Readings/
FF Experiment/25deg_kBT_aov2.csv")
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/
Research Project/Muhammad Shaikh/LDV Readings/
FF Experiment/25deg_kBT_aov2.csv")
aovdf
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/25deg_kBT_aov2.csv")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(f0 ~ genetic_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/25deg_f0_aov2.csv")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(Q ~ genetic_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/25deg_Q_aov2.csv")
#filter data
df_filtered <- filter(df, temperature_condition == "30_deg")
#filter data
df_filtered <- filter(df, temperature_condition == "30_deg")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(kBT ~ genetic_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
aovdf
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/30deg_kBT_aov2.csv")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(f0 ~ genetic_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/30deg_f0_aov2.csv")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(Q ~ genetic_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/30deg_Q_aov2.csv")
#filter data
df_filtered <- filter(df, genetic_condition == "naam")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(kBT ~ temperature_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/naam_kBT_aov2.csv")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(f0 ~ temperature_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/naam_f0_aov2.csv")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(Q ~ temperature_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/naam_Q_aov2.csv")
#filter data
df_filtered <- filter(df, genetic_condition == "empty")
#filter data
df_filtered <- filter(df, genetic_condition == "empty")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(kBT ~ temperature_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/empty_kBT_aov2.csv")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(f0 ~ temperature_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/empty_f0_aov2.csv")
#nonparametric 3-way anova
#aligned rank-transform of data using library(ARTool)
m = art(Q ~ temperature_condition * zeitgeber_time, data=df_filtered) #linear mixed model syntax; see lme4::lmer
#run anova on aligned rank-transformed data
aovdf <- as.data.frame(anova(m))
write.csv(aovdf, "C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/empty_Q_aov2.csv")
#load libraries
library(magrittr)
library(dplyr)
library(readr)
library(ggplot2)
library(purrr)
library(ggpubr)
library(car)
library(rstatix)
library(patchwork)
library(svglite)
library(ggtext)
library(ARTool)
library(phia)
library(emmeans)
#load master data frame
df <- read.csv("C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/model_parameters_all_flies.csv")
#convert temperature_condition, genetic_condition & zeitgeber_time as factors and recode levels
df$temperature_condition <- factor(df$temperature_condition,
levels = c(25, 30),
labels = c("25_deg", "30_deg"))
df$genetic_condition <- factor(df$genetic_condition,
levels = c("naam", "empty"),
labels = c("naam", "empty"))
df$zeitgeber_time <- factor(df$zeitgeber_time,
levels = c(0, 6, 12, 18),
labels = c("ZT0", "ZT6", "ZT12", "ZT18"))
#check format
str(df)
#filter criteria
df_25 <- filter(df, temperature_condition == "25_deg")
naam <- filter(df, genetic_condition == "naam")
empty <- filter(df, genetic_condition == "empty")
ZT0 <- filter(df_25, zeitgeber_time == "ZT0")
ZT0_naam <- filter(ZT0, genetic_condition == "naam")
ZT0_empty <- filter(ZT0, genetic_condition == "empty")
ZT6 <- filter(df_25, zeitgeber_time == "ZT6")
ZT6_naam <- filter(ZT6, genetic_condition == "naam")
ZT6_empty <- filter(ZT6, genetic_condition == "empty")
ZT12 <- filter(df_25, zeitgeber_time == "ZT12")
ZT12_naam <- filter(ZT12, genetic_condition == "naam")
ZT12_empty <- filter(ZT12, genetic_condition == "empty")
ZT18 <- filter(df_25, zeitgeber_time == "ZT18")
ZT18_naam <- filter(ZT18, genetic_condition == "naam")
ZT18_empty <- filter(ZT18, genetic_condition == "empty")
#box plots
#f0
bp_f0 <- ggplot(df_25, aes(x=zeitgeber_time, y=f0)) +
geom_boxplot(aes(color=genetic_condition),  outlier.alpha=0.3) +
theme_minimal() +
xlab("Zeitgeber Time") +
ylab("Best Frequency (Hz)") +
coord_cartesian(
xlim = NULL,
ylim = c(175, 450),
expand = TRUE,
default = FALSE,
clip = "on"
) +
scale_colour_manual("",
values = c("#f8766d", "#00bfc4"),
labels = c("*Naam* RNAi 25°C", "attP40 Control 25°C")) +
theme(legend.text = element_markdown()) +
theme(legend.position = "none") +
stat_summary(fun = mean, shape = 20, size = 0.4, show.legend=FALSE,
aes(colour = genetic_condition), position = position_dodge(width = 0.75))
bp_f0
#functions
se <- function(x, na.rm = TRUE) {
sd(x)/sqrt(length(x))
}
comparisons_list <- function(data,
x) {
# creating a dataframe with just the columns of interest
# make sure the grouping variable x is indeed a factor
# has no unused levels
data <-
dplyr::select(
.data = data,
x = !!rlang::enquo(x)
) %>%
dplyr::mutate(.data = .,
x = droplevels(as.factor(x)))
grouplevels <- levels(data$x)
g1_list <- combn(grouplevels, 2)[1, ]
g2_list <- combn(grouplevels, 2)[2, ]
comparisons_list <- lapply(
1:length(g1_list),
function(i) c(
combn(grouplevels, 2)[2, i],
combn(grouplevels, 2)[1, i]
)
)
return(comparisons_list)
}
#load master data frame
df <- read.csv("C:/Users/test/Documents/MRes Neuroscience/Research Project/Muhammad Shaikh/LDV Readings/FF Experiment/model_parameters_all_flies.csv")
unformatted_df <- df
#check format
str(df)
#convert temperature_condition, genetic_condition & zeitgeber_time as factors and recode levels
df$temperature_condition <- factor(df$temperature_condition,
levels = c(25, 30),
labels = c("25_deg", "30_deg"))
df$genetic_condition <- factor(df$genetic_condition,
levels = c("naam", "empty"),
labels = c("naam", "empty"))
df$zeitgeber_time <- factor(df$zeitgeber_time,
levels = c(0, 6, 12, 18),
labels = c("ZT0", "ZT6", "ZT12", "ZT18"))
#recheck format
str(df)
#means & line plots by temperature_condition, genetic condition, and zeitgeber_time
#f0_means
f0_means <- df %>%
group_by(genetic_condition, zeitgeber_time) %>%
summarise(mean_f0 = mean(f0))
p1 <- ggplot(f0_means, aes(x=zeitgeber_time, y=mean_f0, group=genetic_condition)) +
geom_line(aes(color=genetic_condition)) +
geom_point(aes(color=genetic_condition)) +
ylim(280,375) +
theme_minimal()
p1
#box plots of dependent variables by groups ("zeitgeber_time")
#f0
p4 <-  ggplot(df, aes(x=zeitgeber_time, y=f0)) +
geom_boxplot(aes(color=genetic_condition),  outlier.alpha=0.3) +
theme_minimal()
#kBT
p5 <-  ggplot(df, aes(x=zeitgeber_time, y=kBT)) +
geom_boxplot(aes(color=genetic_condition),  outlier.alpha=0.3) +
theme_minimal()
#Q
p6 <-  ggplot(df, aes(x=zeitgeber_time, y=Q)) +
geom_boxplot(aes(color=genetic_condition),  outlier.alpha=0.3) +
theme_minimal()
p4
#means 4 levels
#f0
f0_means_16 <- df %>%
group_by(genetic_condition, zeitgeber_time, temperature_condition) %>%
summarise(mean_f0 = mean(f0), sem=se(f0), n = length(genetic_condition))
f0_means_16$genetic_temperature_condition <- paste(f0_means_16$genetic_condition, f0_means_16$temperature_condition)
p7 <- ggplot(f0_means_16, aes(x=zeitgeber_time, y=mean_f0, group=genetic_temperature_condition)) +
geom_line(aes(color=genetic_condition, alpha = temperature_condition)) +
geom_point(aes(color=genetic_condition, alpha = temperature_condition)) +
scale_alpha_discrete(range = c(0.3, 1)) +
ylim(225,400) +
theme_minimal()
p7
#kBT
g1 <- ggplot(df, aes(x=zeitgeber_time, y=kBT, color = genetic_temperature_condition,
group = interaction(zeitgeber_time, genetic_condition, temperature_condition))) +
geom_boxplot(outlier.alpha=0.3) +
scale_colour_manual("",
values = c("#94dfe1", "#00bfc4", "#fcbfbb", "#f8766d"),
labels = c("attP40 Control 25°C",
"attP40 Control 30°C",
"*Naam* RNAi 25°C",
"*Naam* RNAi 30°C")) +
xlab("Zeitgeber Time") +
ylab("Power Gain") +
theme_minimal() +
scale_y_log10() +
coord_cartesian(
xlim = NULL,
#ylim = c(0.5, 30),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.text = element_markdown()) +
theme(legend.position = "left") +
stat_summary(fun = mean, shape = 20, size = 0.4, position = position_dodge2(width = 0.75), show.legend=FALSE)
g1
#box plots of dependent variables by groups ("zeitgeber_time")
#f0
df$genetic_temperature_condition <- paste(df$genetic_condition, df$temperature_condition)
df$genetic_temperature_zeitgeber_condition <- paste(df$genetic_temperature_condition, df$zeitgeber_time)
#kBT
g1 <- ggplot(df, aes(x=zeitgeber_time, y=kBT, color = genetic_temperature_condition,
group = interaction(zeitgeber_time, genetic_condition, temperature_condition))) +
geom_boxplot(outlier.alpha=0.3) +
scale_colour_manual("",
values = c("#94dfe1", "#00bfc4", "#fcbfbb", "#f8766d"),
labels = c("attP40 Control 25°C",
"attP40 Control 30°C",
"*Naam* RNAi 25°C",
"*Naam* RNAi 30°C")) +
xlab("Zeitgeber Time") +
ylab("Power Gain") +
theme_minimal() +
scale_y_log10() +
coord_cartesian(
xlim = NULL,
#ylim = c(0.5, 30),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.text = element_markdown()) +
theme(legend.position = "left") +
stat_summary(fun = mean, shape = 20, size = 0.4, position = position_dodge2(width = 0.75), show.legend=FALSE)
g1
p7 <- ggplot(kBT_means_16, aes(x=zeitgeber_time, y=mean_kBT, group=genetic_temperature_condition)) +
geom_line(aes(colour = genetic_temperature_condition), size=.5) +
geom_point(aes(colour = genetic_temperature_condition), size=3) +
geom_errorbar(aes(ymin=mean_kBT-sem, ymax=mean_kBT+sem, color=genetic_temperature_condition), width=.2, size=.5) +
geom_signif(comparisons = comp.list,
step_increase = 0.1, test = "wilcox.test", map_signif_level = TRUE) +
theme_minimal() +
scale_colour_manual("",
values = c("#94dfe1", "#00bfc4", "#fcbfbb", "#f8766d"),
labels = c("attP40 Control 25°C",
"attP40 Control 30°C",
"*Naam* RNAi 25°C",
"*Naam* RNAi 30°C")) +
xlab("") +
ylab("Power Gain") +
theme(legend.text = element_markdown()) +
theme(legend.position = "left")
p7
ggplot(df, aes(x=genetic_temperature_zeitgeber_condition, y=kBT)) +
geom_boxplot(aes(colour = genetic_temperature_condition),outlier.alpha=0.3) +
geom_signif(comparisons = comp.list, step_increase = 0.1, test = "wilcox.test", map_signif_level = TRUE) +
xlab("") +
ylab("Power Gain") +
theme_minimal() +
coord_cartesian(
xlim = NULL,
#ylim = c(0.5, 30),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = "left") +
theme(axis.text.x = element_text(angle=90)) +
scale_colour_manual("", values = c("#94dfe1", "#00bfc4", "#fcbfbb", "#f8766d"))
#draft
comp.list <- comparisons_list(data = df, x = genetic_temperature_zeitgeber_condition)
ggplot(df, aes(x=genetic_temperature_zeitgeber_condition, y=kBT)) +
geom_boxplot(aes(colour = genetic_temperature_condition),outlier.alpha=0.3) +
geom_signif(comparisons = comp.list, step_increase = 0.1, test = "wilcox.test", map_signif_level = TRUE) +
xlab("") +
ylab("Power Gain") +
theme_minimal() +
coord_cartesian(
xlim = NULL,
#ylim = c(0.5, 30),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = "left") +
theme(axis.text.x = element_text(angle=90)) +
scale_colour_manual("", values = c("#94dfe1", "#00bfc4", "#fcbfbb", "#f8766d"))
#kBT
i <- ggplot(df, aes(x=genetic_temperature_condition, y=kBT)) +
geom_boxplot(aes(colour=zeitgeber_time)) +
stat_summary(fun = mean, geom = "crossbar",
width = 1, color = "black", size = 0.2) +
#stat_summary(aes(label=round(..y..,3)), fun = mean, geom="text", size=4, vjust = -0.2, hjust = 0.5, angle = 0, fontface = "bold") +
geom_signif(comparisons = comp.list,
step_increase = 0.1, test = "wilcox.test", map_signif_level = TRUE) +
scale_colour_brewer("", palette = "BrBG") +
theme_minimal() +
scale_y_log10() +
ylab("Power Gain") +
xlab("") +
theme(legend.position = "left") +
scale_x_discrete(labels= x.labs) +
theme(axis.text.x = element_text(angle=90)) +
coord_cartesian(
xlim = NULL,
ylim = c(1e-01, 1e+04),
expand = TRUE,
default = FALSE,
clip = "on")
x.labs <- c("attP40 Control 25°C", "attP40 Control 30°C", "Naam RNAi 25°C", "Naam RNAi 30°C")
#kBT
i <- ggplot(df, aes(x=genetic_temperature_condition, y=kBT)) +
geom_boxplot(aes(colour=zeitgeber_time)) +
stat_summary(fun = mean, geom = "crossbar",
width = 1, color = "black", size = 0.2) +
#stat_summary(aes(label=round(..y..,3)), fun = mean, geom="text", size=4, vjust = -0.2, hjust = 0.5, angle = 0, fontface = "bold") +
geom_signif(comparisons = comp.list,
step_increase = 0.1, test = "wilcox.test", map_signif_level = TRUE) +
scale_colour_brewer("", palette = "BrBG") +
theme_minimal() +
scale_y_log10() +
ylab("Power Gain") +
xlab("") +
theme(legend.position = "left") +
scale_x_discrete(labels= x.labs) +
theme(axis.text.x = element_text(angle=90)) +
coord_cartesian(
xlim = NULL,
ylim = c(1e-01, 1e+04),
expand = TRUE,
default = FALSE,
clip = "on")
#means
comp.list <- comparisons_list(data = df, x = genetic_temperature_condition)
x.labs <- c("attP40 Control 25°C", "attP40 Control 30°C", "Naam RNAi 25°C", "Naam RNAi 30°C")
#kBT
i <- ggplot(df, aes(x=genetic_temperature_condition, y=kBT)) +
geom_boxplot(aes(colour=zeitgeber_time)) +
stat_summary(fun = mean, geom = "crossbar",
width = 1, color = "black", size = 0.2) +
#stat_summary(aes(label=round(..y..,3)), fun = mean, geom="text", size=4, vjust = -0.2, hjust = 0.5, angle = 0, fontface = "bold") +
geom_signif(comparisons = comp.list,
step_increase = 0.1, test = "wilcox.test", map_signif_level = TRUE) +
scale_colour_brewer("", palette = "BrBG") +
theme_minimal() +
scale_y_log10() +
ylab("Power Gain") +
xlab("") +
theme(legend.position = "left") +
scale_x_discrete(labels= x.labs) +
theme(axis.text.x = element_text(angle=90)) +
coord_cartesian(
xlim = NULL,
ylim = c(1e-01, 1e+04),
expand = TRUE,
default = FALSE,
clip = "on")
i
